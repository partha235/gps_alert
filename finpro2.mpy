from machine import Pin, UART
import network
import time
import urequests as requests
from umqtt.simple import MQTTClient

# Credentials and setup
try:
    from bps_cre import *
except:
    pass

# Twilio SMS Credentials
TWILIO_SID = twilio_sid
TWILIO_AUTH_TOKEN = twilio_tok
TWILIO_PHONE_NUMBER = twilio_num
TO_PHONE_NUMBER = '+919488790964'

# Adafruit IO Credentials
ADAFRUIT_IO_USERNAME = ADAFRUIT_AIO_USERNAME
ADAFRUIT_IO_KEY = ADAFRUIT_AIO_KEY
FEED_NAME = "location-alert"

# Wi-Fi Credentials
SSID = bps_ssid
PASSWORD = bps_passw

# GPS and Button setup
gps = UART(1, baudrate=9600, tx=16, rx=17, timeout=500)
button = Pin(15, Pin.IN, Pin.PULL_UP)

# Connect to Wi-Fi
def connect_wifi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(SSID, PASSWORD)
    while not wlan.isconnected():
        pass
    print("Connected to WiFi:", wlan.ifconfig())

# Parse GPS Data
def parse_gps():
    timeout = time.time() + 5
    while time.time() < timeout:
        line = gps.readline()
        if line and b"GPGGA" in line:
            try:
                parts = line.decode('utf-8').split(",")
                if len(parts) > 5 and parts[2] and parts[4]:
                    latitude = convert_to_degrees(parts[2], parts[3])
                    longitude = convert_to_degrees(parts[4], parts[5])
                    return latitude, longitude
            except Exception as e:
                print("Error parsing GPS:", e)
    return None, None

# Convert GPS format to decimal degrees
def convert_to_degrees(raw, direction):
    raw_float = float(raw)
    degrees = int(raw_float / 100)
    minutes = raw_float - degrees * 100
    decimal_degrees = degrees + minutes / 60
    if direction in ['S', 'W']:
        decimal_degrees = -decimal_degrees
    return decimal_degrees

# Send SMS via Twilio
def send_sms(message):
    url = f"https://api.twilio.com/2010-04-01/Accounts/{TWILIO_SID}/Messages.json"
    data = f"To={TO_PHONE_NUMBER}&From={TWILIO_PHONE_NUMBER}&Body={message}"
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    response = requests.post(url, data=data, auth=(TWILIO_SID, TWILIO_AUTH_TOKEN), headers=headers)
    print("SMS Response:", response.text)
    response.close()

# Publish location to Adafruit IO
def publish_location(client, latitude, longitude):
    payload = f"{latitude},{longitude}"
    topic = f"{ADAFRUIT_IO_USERNAME}/feeds/{FEED_NAME}"
    client.publish(topic, payload.encode())
    print("Published to Adafruit IO:", payload)

# Main Program
def main():
    connect_wifi()
    mqtt_client = MQTTClient("ESP32", "io.adafruit.com", user=ADAFRUIT_IO_USERNAME, password=ADAFRUIT_IO_KEY)
    mqtt_client.connect()

    while True:
        latitude, longitude = parse_gps()

        if latitude and longitude:
            print(f"Location: Latitude={latitude}, Longitude={longitude}")
            publish_location(mqtt_client, latitude, longitude)
            
            if not button.value():  # Button pressed
                message = f"help me https://www.google.com/maps?q={latitude},{longitude}"
                send_sms(message)
        else:
            print("No GPS data available.")
            if not button.value():  # Button pressed
                message = f"help me"
                send_sms(message)
        
        time.sleep(30)  # Adjust delay as needed

if __name__ == "__main__":
    main()
